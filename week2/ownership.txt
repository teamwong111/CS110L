Example 1:
```
fn main() {
    let mut s = String::from("hello");
    let ref1 = &s;
    let ref2 = &ref1;
    let ref3 = &ref2;
    s = String::from("goodbye");
    println!("{}", ref3.to_uppercase());
}
```

// Compile: no. because `ref1` still holds a reference to `s`, `s` can't be assigned to a new value as it would invalidate the reference.
// Solution: `let ref1 = &s; -> let ref1 = s;`. ref1 `gets` "hello" ownership, `s` is assigned "goodbye", print "HELLO".

Example 2:
```
fn drip_drop() -> &String {
    let s = String::from("hello world!");
    return &s;
}
```

// Compile: no. because s is droped when leaving this function, the reference will point to an invalid String.
// Solution: `return &s; -> return s;`.

Example 3:
```
fn main() {
    let s1 = String::from("hello");
    let mut v = Vec::new();
    v.push(s1);
    let s2: String = v[0];
    println!("{}", s2);
}
```

// Compile: no. because String doesn't have Copy trait.
// Solution: `let s2: String = v[0]; -> let s2: &String = &v[0];`